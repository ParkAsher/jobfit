<div class="container-fluid">
    <div class="row">
        <div class="col-2" id="keyword-card">
            <div class="card">
                <div class="row">
                    <p class="keyword-text">
                        필터
                        <a title="초기화" onclick="resetKeywords()" style="cursor: pointer;">
                            <span class="material-symbols-outlined" id="resetButton">
                                restart_alt
                            </span></a>
                    </p>
                </div>
                <div class="row">
                    <p class="keyword-text">
                        <span class="material-symbols-outlined">
                            location_on
                        </span>
                        주소
                    </p>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                data-bs-toggle="dropdown" aria-expanded="false">
                            </button>
                            <ul class="dropdown-menu" id="addressUpperDropdown">
                            </ul>
                        </div>
                    </div>
                    <div class=" col">
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                data-bs-toggle="dropdown" aria-expanded="false">
                            </button>
                            <ul class="dropdown-menu" id="addressLowerDropdown">
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <p class="keyword-text">
                        <span class="material-symbols-outlined">
                            format_list_bulleted
                        </span>
                        키워드
                    </p>
                </div>
                <div id="keywordList"></div>
                <div class="row">
                    <p class="keyword-text">
                        <span class="material-symbols-outlined">
                            code_blocks
                        </span>
                        기술 스택
                    </p>
                </div>
                <div id="stackList"></div>
            </div>
        </div>
        <div class="col-8" id="mainContainer">
            <div class="order">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"
                        aria-expanded="false" id="currentOrder">
                    </button>
                    <ul class="dropdown-menu">
                        <% if (!user) { %>
                            <li title="기술스택에 딱 맞는 현재 공고를 보고싶으면 로그인해주세요!"><a class="dropdown-item disabled"
                                    href="/jobposts?sort=recent&order=desc">추천순</a></li>
                            <% } else { %>
                                <li><a class="dropdown-item"
                                        onclick="appendQueryParameter({sort: 'recent', order: 'desc'})"
                                        id="recommend">추천순</a>
                                </li>
                                <% } %>
                                    <li><a class="dropdown-item"
                                            onclick="appendQueryParameter({sort: 'recent', order: 'desc'})"
                                            id="recent">최신순</a>
                                    </li>
                                    <li><a class="dropdown-item"
                                            onclick="appendQueryParameter({sort: 'popular', order: 'desc'})"
                                            id="popular">인기순</a></li>
                                    <li><a class="dropdown-item"
                                            onclick="appendQueryParameter({sort: 'ending', order: 'asc'})"
                                            id="ending">마감순</a>
                                    </li>
                    </ul>
                </div>
            </div>
            <div class="row row-cols-1 row-cols-md-4 g-4" id="jobpostRow1"></div>
            <div class="row row-cols-1 row-cols-md-4 g-4" id="jobpostRow2"></div>
            <div class="row row-cols-1 row-cols-md-4 g-4" id="jobpostRow3"></div>
            <div class="row row-cols-1 row-cols-md-4 g-4" id="jobpostRow4"></div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        let url = new URL(window.location.href)
        let sort = url.searchParams.get('sort') || 'recent'
        let order = url.searchParams.get('order') || 'desc'
        let limit = url.searchParams.get('limit')
        let offset = url.searchParams.get('offset')

        switch (sort) {
            case 'popular':
                $('#currentOrder').html('인기순')
                $('#popular').addClass('active')
                break
            case 'ending':
                $('#currentOrder').html('마감순')
                $('#ending').addClass('active')
                break
            case 'recent':
            case 'recommended':
            default:
                $('#currentOrder').html('최신순')
                $('#recent').addClass('active')
                break
        }

        $.ajax({
            type: "GET",
            url: `/api/jobpost/filter${url.search}`,
            async: false,
            success: function (response) {
                console.log(response)
                showJobposts(response)
            }
        })

        $.ajax({
            type: "GET",
            url: `/api/jobpost/addresses`,
            async: false,
            success: function (response) {
                const { addressUpper, addressLower } = response
                for (let i = 0; i < addressUpper.length; i++) {
                    let tempHtml = `<li><a class="dropdown-item" onclick="$('#addressLowerDropDown > li').hide(); $('#addressLowerDropDown > li.${addressUpper[i].address_upper}').show()">${addressUpper[i].address_upper}</a>
                                </li>`
                    $('#addressUpperDropdown').append(tempHtml)

                    tempHtml = `<li class="${addressUpper[i].address_upper}"><a class="dropdown-item" onclick="appendQueryParameter({address_upper: '${addressUpper[i].address_upper}', address_lower: null})">전체</a>
                                </li>`
                    $('#addressLowerDropdown').append(tempHtml)
                }

                for (let i = 0; i < addressLower.length; i++) {
                    if (addressLower[i].address_lower === '전체') continue
                    const tempHtml = `<li class="${addressLower[i].address_upper}"><a class="dropdown-item" onclick="appendQueryParameter({address_upper: '${addressLower[i].address_upper}', address_lower: '${addressLower[i].address_lower}'})">${addressLower[i].address_lower}</a>
                                </li>`
                    $('#addressLowerDropdown').append(tempHtml)
                }
            }
        })

        $.ajax({
            type: "GET",
            url: `/api/jobpost/stacks`,
            async: false,
            success: function (response) {
                let categories = []
                let tempHtml = ``
                for (let i = 0; i < response.length; i++) {
                    if (!categories.includes(response[i].category)) {
                        categories.push(response[i].category)
                        tempHtml = `<div class="row">
                                            <p class="keyword-text">
                                                ${response[i].category}
                                            </p>
                                        </div>
                                        <div class="row" id="${response[i].category}"></div>`

                        $('#stackList').append(tempHtml)
                    }

                    tempHtml = `<button class="btn btn-outline-secondary filterButton" id="${response[i].stack.replaceAll(/\s/g, '')}" type="button" data-bs-toggle="button" onclick="appendStackQueryParameter($(this).hasClass('active'),'${response[i].stack}')">${response[i].stack}</button>`
                    $(`#${response[i].category}`).append(tempHtml)
                }
            }
        })

        $.ajax({
            type: "GET",
            url: `/api/jobpost/keywords`,
            async: false,
            success: function (response) {
                for (let i = 0; i < response.length; i++) {
                    const tempHtml = `<button class="btn btn-outline-secondary filterButton" id="keywordCode${response[i].keyword_code}" type="button" data-bs-toggle="button" onclick="appendKeywordQueryParameter($(this).hasClass('active'),'${response[i].keyword_code}')">${response[i].keyword}</button>`
                    $('#keywordList').append(tempHtml)
                }
            }
        })

        let stacks = url.searchParams.get('stack')
        if (stacks) {
            stacks = stacks.split(',')
            for (let i = 0; i < stacks.length; i++) {
                const stack = stacks[i].replaceAll(/\s/g, '')
                $(`#${stack}`).addClass('active')
            }
        }

        let keywordCode = url.searchParams.get('keywordCode')
        if (keywordCode) {
            keywordCode = keywordCode.split(',')
            for (let i = 0; i < keywordCode.length; i++) {
                $(`#keywordCode${keywordCode[i]}`).addClass('active')
            }
        }
    })

    function showJobposts(response) {
        for (let i = 0; i < response.length; i++) {
            const title = response[i].title
            const companyName = response[i].company_name
            const jobpostImgUrl = response[i].original_img_url
            const addressUpper = response[i].address_upper
            const addressLower = response[i].address_lower
            const stackImgUrlArr = response[i].stackimgurls === null ? null : response[i].stackimgurls.split(',')
            const stackArr = response[i].stacks === null ? null : response[i].stacks.split(',')

            let deadlineDtm
            if (response[i].deadline_dtm) {
                const date = new Date(response[i].deadline_dtm)
                deadlineDtm = date.toLocaleDateString('ko-KR', { dateStyle: 'long' })
            } else {
                deadlineDtm = '상시 채용'
            }

            let tempHtml = ``
            tempHtml += `<div class="col">
                                        <div class="card">
                                            <span class="material-symbols-outlined likeIcon">
                                                star
                                            </span>
                                            <img src="${jobpostImgUrl}"
                                                class="card-img-top" alt="${companyName}" title="${companyName}">
                                            <div class="card-body">
                                                <h5 class="card-title">${title}</h5>
                                                <p class="card-text companyName">
                                                    ${companyName}
                                                </p>
                                                <div class="card-text row">
                                                    <div class="col">
                                                        <a class="card-col">
                                                        <span class="material-symbols-outlined">
                                                            work
                                                        </span>
                                                        신입
                                                        </a>
                                                    </div>
                                                    <div class="col-8">
                                                        <a class="card-col">
                                                        <span class="material-symbols-outlined">
                                                            location_on
                                                        </span>
                                                        ${addressUpper} ${addressLower}
                                                        </a>
                                                    </div>
                                                    <div class="col-8">
                                                        <a class="card-col">
                                                        <span class="material-symbols-outlined">
                                                            calendar_month
                                                        </span>
                                                        ${deadlineDtm}
                                                        </a>
                                                    </div>
                                                </div>
                                                <p class="card-text">
                                                    `
            if (stackImgUrlArr !== null) {
                for (let j = 0; j < stackImgUrlArr.length; j++) {
                    const imgTag = `<img src="${stackImgUrlArr[j]}" alt="${stackArr[j]}" title="${stackArr[j]}">`
                    tempHtml += imgTag
                }
            }

            tempHtml += `              </p>
                                            </div>
                                        </div>
                                    </div>`

            $(`#jobpostRow${Math.floor(i / 4) + 1}`).append(tempHtml)
        }
    }

    function appendQueryParameter(queries) {
        const params = Object.keys(queries)
        let url = new URL(window.location.href)

        for (let i = 0; i < params.length; i++) {
            if (queries[params[i]] === null) {
                url.searchParams.delete(params[i])
            } else {
                url.searchParams.set(params[i], queries[params[i]])
            }
        }

        window.location.href = url.href
    }

    function appendStackQueryParameter(hasClassActive, stack) {
        let url = new URL(window.location.href)
        let stackParam = url.searchParams.get('stack')

        // hasClassActive = true => 버튼 선택
        if (hasClassActive) {
            // If there is no 'stack' query parameter
            if (!stackParam) {
                url.searchParams.append('stack', stack)
            } else {
                // If there is the 'stack' query parameter
                stackParam += `,${stack}`
                url.searchParams.set('stack', stackParam)
            }
        }

        // hasClassActive = false => 버튼 선택 취소
        if (!hasClassActive) {
            const newStackParam = stackParam.split(',').filter((value, _i, _a) => { return value !== stack }).join(',')
            if (newStackParam.length === 0) {
                url.searchParams.delete('stack')
            } else {
                url.searchParams.set('stack', [newStackParam])
            }
        }

        window.location.href = url.href
    }

    function appendKeywordQueryParameter(hasClassActive, keywordCode) {
        let url = new URL(window.location.href)
        let keywordCodeParam = url.searchParams.get('keywordCode')

        // hasClassActive = true => 버튼 선택
        if (hasClassActive) {
            if (!keywordCodeParam) {
                url.searchParams.append('keywordCode', keywordCode)
            } else {
                keywordCodeParam += `,${keywordCode}`
                url.searchParams.set('keywordCode', keywordCodeParam)
            }
        }

        // hasClassActive = false => 버튼 선택 취소
        if (!hasClassActive) {
            const newKeywordCodeParam = keywordCodeParam.split(',').filter((value, _i, _a) => { return value !== keywordCode }).join(',')
            if (newKeywordCodeParam.length === 0) {
                url.searchParams.delete('keywordCode')
            } else {
                url.searchParams.set('keywordCode', [newKeywordCodeParam])
            }
        }

        window.location.href = url.href
    }

    function resetKeywords() {
        let url = new URL(window.location.href)
        const keys = Array.from(url.searchParams.keys())

        for (const key of keys) {
            if (key === 'sort' || key === 'order') { continue }
            console.log(key)
            url.searchParams.delete(key)
        }

        window.location.href = url.href
    }
</script>